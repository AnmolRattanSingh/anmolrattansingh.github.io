<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Structures on Gati Aher&#39;s Blog</title>
    <link>http://GatiAher.github.io/tags/data-structures/</link>
    <description>Recent content in Data Structures on Gati Aher&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 09 May 2021 21:21:42 -0400</lastBuildDate>
    
	<atom:link href="http://GatiAher.github.io/tags/data-structures/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Data Structures for Large Scale Information Retrieval</title>
      <link>http://GatiAher.github.io/projects/data-structures-for-large-scale-information-retrieval/</link>
      <pubDate>Sun, 09 May 2021 21:21:42 -0400</pubDate>
      
      <guid>http://GatiAher.github.io/projects/data-structures-for-large-scale-information-retrieval/</guid>
      <description>5-minute video overview:    1 INTRODUCTION 2 BACKGROUND INFORMATION  2.1 Inverted Indexes For Fast (Constant Time) Lookup 2.2 Big Document IDs Use a Lot of Space 2.3 An Overview of Compression Codes: Balancing Space Savings and Time Cost   3 ELIAS-FANO COMPRESSION  3.1 Introducing Quasi-Succinct Elias-Fano: Fast, Small and Better than Sequential Decoding 3.2 Speed-Up Elias-Fano with Quantum Skipping 3.3 Review of Elias-Fano   4 PARTITIONED ELIAS-FANO COMPRESSION  4.</description>
    </item>
    
    <item>
      <title>Bloom for Search From Scratch</title>
      <link>http://GatiAher.github.io/projects/bloom-for-search-from-scratch/</link>
      <pubDate>Sat, 08 May 2021 09:35:51 -0400</pubDate>
      
      <guid>http://GatiAher.github.io/projects/bloom-for-search-from-scratch/</guid>
      <description>1 PROJECT GOALS AND RESULTS 2 BLOOM FILTERS  2.1 Demo 1: Bloom filter to spellcheck a query 2.2 Demo 2: Bloom filter to spellcheck a file   3 BIT-SLICED DOCUMENT SIGNATURES  3.1 Demo 3: Information retrieval on xkcd comics transcripts   4 APPENDIX  4.1 Note on Code Design  4.1.1 Bit-wise functions that take advantage of powers of 2 4.1.2 Function pointers for cleaner, reusable code 4.</description>
    </item>
    
  </channel>
</rss>